
const { ethers } = require("ethers");


const ganache = require("ganache");

const options = { logging: { quiet: true}};
const provider = new ethers.providers.Web3Provider(ganache.provider(options));


const {approveTokens, verifyApproval} = require("ethutils");

const ADJ_CONSTANT = 1000000000000000000; //10**18

const token_contract_abi = [{"inputs":[{"internalType":"address","name":"creator_","type":"address"},{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"uint256","name":"supply_","type":"uint256"},{"internalType":"uint8","name":"decimals_","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}];
const token_contract_bytecode = '0x60806040523480156200001157600080fd5b5060405162000d7538038062000d75833981810160405260a08110156200003757600080fd5b8151602083018051604051929492938301929190846401000000008211156200005f57600080fd5b9083019060208201858111156200007557600080fd5b82516401000000008111828201881017156200009057600080fd5b82525081516020918201929091019080838360005b83811015620000bf578181015183820152602001620000a5565b50505050905090810190601f168015620000ed5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011157600080fd5b9083019060208201858111156200012757600080fd5b82516401000000008111828201881017156200014257600080fd5b82525081516020918201929091019080838360005b838110156200017157818101518382015260200162000157565b50505050905090810190601f1680156200019f5780820380516001836020036101000a031916815260200191505b506040908152602082810151929091015186519294509250620001c89160039187019062000376565b508251620001de90600490602086019062000376565b50620001f485836001600160e01b036200021316565b6005805460ff191660ff92909216919091179055506200041b92505050565b6001600160a01b0382166200026f576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200028b816002546200031460201b6200089a1790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620002be9183906200089a62000314821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828201838110156200036f576040805162461bcd60e51b815260206004820152601660248201527f536166654d6174683a20616464206f766572666c6f7700000000000000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003b957805160ff1916838001178555620003e9565b82800160010185558215620003e9579182015b82811115620003e9578251825591602001919060010190620003cc565b50620003f7929150620003fb565b5090565b6200041891905b80821115620003f7576000815560010162000402565b90565b61094a806200042b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063395093511161007157806339509351146101d957806370a082311461020557806395d89b411461022b578063a457c2d714610233578063a9059cbb1461025f578063dd62ed3e1461028b576100a9565b806306fdde03146100ae578063095ea7b31461012b57806318160ddd1461016b57806323b872dd14610185578063313ce567146101bb575b600080fd5b6100b66102b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b03813516906020013561034f565b604080519115158252519081900360200190f35b610173610365565b60408051918252519081900360200190f35b6101576004803603606081101561019b57600080fd5b506001600160a01b0381358116916020810135909116906040013561036b565b6101c36103da565b6040805160ff9092168252519081900360200190f35b610157600480360360408110156101ef57600080fd5b506001600160a01b0381351690602001356103e3565b6101736004803603602081101561021b57600080fd5b50356001600160a01b031661041f565b6100b661043a565b6101576004803603604081101561024957600080fd5b506001600160a01b03813516906020013561049b565b6101576004803603604081101561027557600080fd5b506001600160a01b03813516906020013561050e565b610173600480360360408110156102a157600080fd5b506001600160a01b038135811691602001351661051b565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061035c338484610546565b50600192915050565b60025490565b600061037884848461065e565b6103d084336103cb856040518060600160405280602181526020016108f5602191396001600160a01b038a166000908152600160209081526040808320338452909152902054919063ffffffff61080316565b610546565b5060019392505050565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161035c9185906103cb908663ffffffff61089a16565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b604080518082018252601e81527f64656372656173656420616c6c6f77616e63652062656c6f77207a65726f0000602080830191909152336000818152600183528481206001600160a01b038816825290925292812054909261035c92909186916103cb9190879063ffffffff61080316565b600061035c33848461065e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166105a1576040805162461bcd60e51b815260206004820152601d60248201527f617070726f76652066726f6d20746865207a65726f2061646472657373000000604482015290519081900360640190fd5b6001600160a01b0382166105fc576040805162461bcd60e51b815260206004820152601b60248201527f617070726f766520746f20746865207a65726f20616464726573730000000000604482015290519081900360640190fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106b9576040805162461bcd60e51b815260206004820152601e60248201527f7472616e736665722066726f6d20746865207a65726f20616464726573730000604482015290519081900360640190fd5b6001600160a01b038216610714576040805162461bcd60e51b815260206004820152601c60248201527f7472616e7366657220746f20746865207a65726f206164647265737300000000604482015290519081900360640190fd5b604080518082018252601f81527f7472616e7366657220616d6f756e7420657863656564732062616c616e6365006020808301919091526001600160a01b038616600090815290819052919091205461077491839063ffffffff61080316565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546107a9908263ffffffff61089a16565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156108925760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561085757818101518382015260200161083f565b50505050905090810190601f1680156108845780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156108ed576040805162461bcd60e51b8152602060048201526016602482015275536166654d6174683a20616464206f766572666c6f7760501b604482015290519081900360640190fd5b939250505056fe7472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a265627a7a723158201428d0106a45e337c6a9d34cb576b1a49835a3cc471534430768b735fd33d4cf64736f6c63430005110032';

  		
const staking_contract_abi = [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"CANNOT_TRANSFER_TO_ZERO_ADDRESS","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_CURRENT_OWNER","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"apy","type":"uint256"},{"internalType":"uint256","name":"minLockTime","type":"uint256"},{"internalType":"bool","name":"canJoin","type":"bool"},{"internalType":"uint256","name":"dpEndDate","type":"uint256"}],"name":"addDepositProfile","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userWallet","type":"address"},{"internalType":"uint256","name":"depositIndex","type":"uint256"}],"name":"amountForUserDeposit","outputs":[{"internalType":"uint256","name":"depositProfileId","type":"uint256"},{"internalType":"uint256","name":"depositAmount","type":"uint256"},{"internalType":"uint256","name":"depositExtractableAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"customersDeposits","outputs":[{"internalType":"address","name":"customer","type":"address"},{"internalType":"uint256","name":"depositsNumber","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"customersDepositsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint32","name":"profileId","type":"uint32"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"userWallet","type":"address"},{"internalType":"uint32","name":"depositId","type":"uint32"}],"name":"depositDays","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"uint256","name":"depositId","type":"uint256"}],"name":"depositIsExtractable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"depositProfiles","outputs":[{"internalType":"uint32","name":"id","type":"uint32"},{"internalType":"uint256","name":"apy","type":"uint256"},{"internalType":"uint256","name":"minLockTime","type":"uint256"},{"internalType":"bool","name":"canJoin","type":"bool"},{"internalType":"uint256","name":"endDate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"depositProfilesLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"uint256","name":"depositId","type":"uint256"}],"name":"depositReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBaseToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getContractDay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getCustomersDepositsItem","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"id","type":"uint32"}],"name":"getDepositProfileById","outputs":[{"internalType":"uint256","name":"apy","type":"uint256"},{"internalType":"uint256","name":"minLockTime","type":"uint256"},{"internalType":"bool","name":"canJoin","type":"bool"},{"internalType":"uint256","name":"dpEndDate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEndDate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getManager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isActive","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userWallet","type":"address"}],"name":"numberOfUserDeposits","outputs":[{"internalType":"uint256","name":"userDepositsNumber","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ownAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"realAmountTokens","type":"uint256"}],"name":"ownerWithdrawTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"id","type":"uint32"}],"name":"removeDepositProfileAtId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"index","type":"uint32"}],"name":"removeDepositProfileAtIndex","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"id","type":"uint32"},{"internalType":"uint256","name":"apy","type":"uint256"},{"internalType":"uint256","name":"minLockTime","type":"uint256"},{"internalType":"bool","name":"canJoin","type":"bool"},{"internalType":"uint256","name":"dpEndDate","type":"uint256"}],"name":"replaceDepositProfileAtId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userWallet","type":"address"},{"internalType":"uint256","name":"depositIndex","type":"uint256"}],"name":"rewardForUserDeposit","outputs":[{"internalType":"uint256","name":"depositProfileId","type":"uint256"},{"internalType":"uint256","name":"rewardForDeposit","type":"uint256"},{"internalType":"uint256","name":"extractableRewardForDeposit","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newBaseTokenAddress","type":"address"}],"name":"setBaseToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"period","type":"uint256"}],"name":"setContractDay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newEndDate","type":"uint256"}],"name":"setEndDate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newstakingManager","type":"address"}],"name":"setManagerRight","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userWallet","type":"address"},{"internalType":"uint32","name":"depositId","type":"uint32"}],"name":"viewCustomerDeposit","outputs":[{"internalType":"uint32","name":"depositProfileId","type":"uint32"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"uint256","name":"depositId","type":"uint256"}],"name":"viewCustomerDepositByIndex","outputs":[{"internalType":"uint32","name":"depositProfileId","type":"uint32"},{"internalType":"uint256","name":"depositAmount","type":"uint256"},{"internalType":"uint256","name":"depositDate","type":"uint256"},{"internalType":"uint256","name":"accumulatedReward","type":"uint256"},{"internalType":"bool","name":"implyLock","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"depositId","type":"uint32"},{"internalType":"uint256","name":"withdrawAmount","type":"uint256"},{"internalType":"bool","name":"whole","type":"bool"}],"name":"withdrawDepositById","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"depositId","type":"uint32"}],"name":"withdrawDepositRewardById","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}];
const staking_contract_bytecode = '';


let token_contract, staking_contract;



testall();



let sleep = ms => new Promise(resolve => setTimeout(resolve, ms));



async function printUserBalance(user_name, user_wallet_addr){
	console.log(user_name, 'token: ', ethers.utils.formatEther( await token_contract.balanceOf(user_wallet_addr) )  );

}

async function verifyUserBalance(user_wallet_addr, t_contract) {
	if (ethers.utils.formatEther( await t_contract.balanceOf(user_wallet_addr) ) >= 5000 ){
		return true;
	} else {
		return false;
	}
	
}

/*
async function approveTokens(user_wallet_addr, user_wallet){
	let total_supply = await token_contract.totalSupply();

	let allow = await token_contract.allowance(user_wallet_addr,staking_contract.address);
            
	
    if (allow.toString() == total_supply.toString()) return;
      

    const user_token_rw = new ethers.Contract(token_contract.address, token_contract_abi, user_wallet);
	
	let tx = await user_token_rw.approve(staking_contract.address,total_supply.toString(), {
                              
                                              gasPrice: 10000000000,
                                              gasLimit: 3000000
                                            }); 
  	await tx.wait();


}

async function verifyApproval(t_contract, user_wallet_addr, staking_contract_addr){
	let total_supply = await t_contract.totalSupply();

	let allow = await t_contract.allowance(user_wallet_addr,staking_contract_addr);
            
	
    if (allow.toString() == total_supply.toString()){ 
    	return true;
    } else {
    	return false;
    }
     

}
*/



async function stakeTokens(num, profileId ,stake_contract){
 


    let tx = await stake_contract.deposit(ethers.BigNumber.from(num),profileId, {
                              
                                              gasPrice: 10000000000,
                                              gasLimit: 3000000
                                            }); 
    await tx.wait();
}


async function withdrawDeposit(stake_contract, depositId, withdrawAmount, whole){
	
	let tx = await stake_contract.withdrawDepositById(depositId, withdrawAmount, whole,{
                              
                                              gasPrice: 10000000000,
                                              gasLimit: 3000000
                                            }); 
	await tx.wait();
	
}


async function withdrawDepositReward(stake_contract, depositId){

	let tx = await stake_contract.withdrawDepositRewardById(depositId,{
                              
                                              gasPrice: 10000000000,
                                              gasLimit: 3000000
                                            }); 
	await tx.wait();

}

async function outputDeposits(user_wallet_addr,stake_contract){ 

     
	  let numDeposits = parseInt(await stake_contract.numberOfUserDeposits(user_wallet_addr));     
      
      for (let i = 0; i < numDeposits; i++){
      	
      	let dep = await stake_contract.amountForUserDeposit(user_wallet_addr, i);
      	let rew = await stake_contract.rewardForUserDeposit(user_wallet_addr, i);
      	
      	
      	console.log('deposit  #'+i.toString());
      	console.log('deposit profile: ' + dep.depositProfileId);;
      	console.log('deposit amount: '  + ethers.utils.formatEther(dep.depositAmount));
      	let usd_bn = ethers.BigNumber.from(dep.usdDepositAmount); 
      	usd_bn = usd_bn.mul(ethers.BigNumber.from('10000000000'));
      	console.log('USD deposit amount: '  + ethers.utils.formatEther(usd_bn));
      	console.log('extractable deposit amount: '  + ethers.utils.formatEther(dep.depositExtractableAmount));
      	console.log('deposit reward: '  + ethers.utils.formatEther(rew.rewardForDeposit));
      	usd_bn = ethers.BigNumber.from(rew.usdRewardForDeposit); 
      	usd_bn = usd_bn.mul(ethers.BigNumber.from('10000000000'));	
      	console.log('USD reward amount: '  + ethers.utils.formatEther(usd_bn));
      	console.log('extractable reward amount: '  + ethers.utils.formatEther(rew.extractableRewardForDeposit));
      	
      }

}


async function verifyDeposit(user_wallet_addr,stake_contract, amount, id){ 

     
	 
      	
      let dep = await stake_contract.amountForUserDeposit(user_wallet_addr, id);
      	
      if (ethers.utils.formatEther(dep.depositAmount) == amount){
      	return true;
      } else {
      	return false;
      }
      	
}







async function verifyWithdrawDeposits(user_wallet_addr,stake_contract){ 

     
	  let numDeposits;	
      try {
	  	numDeposits = parseInt(await stake_contract.numberOfUserDeposits(user_wallet_addr));   
	  	//console.log('numDeposits=', numDeposits); 
	  } catch {
	  	return false;
	  }

	 
      
      for (let i = 0; i < numDeposits; i++){
      	
      	
      	let dep = await stake_contract.amountForUserDeposit(user_wallet_addr, i);

      	if (dep.depositAmount.toString() == '0') continue;

      	let rew = await stake_contract.rewardForUserDeposit(user_wallet_addr, i);
      	let dep_days = await stake_contract.depositDays(user_wallet_addr, i);
      	let contract_day = await stake_contract.getContractDay(); 

      	let dep_profile = await stake_contract.getDepositProfileById(dep.depositProfileId);
     
  		let lock_time = parseInt( dep_profile.minLockTime.toString() );
  		let dep_time = parseInt( (dep_days.mul(contract_day)).toString() );

  		
  		
  		if (lock_time < dep_time){
  			
  			
  			try {
				await withdrawDeposit(stake_contract, i, 0, true);
				
			} catch {
				return false; //incorrect 
				 			
			}

			try {
				await withdrawDepositReward(stake_contract, i);
				
			} catch {
				return false; //incorrect			
			}

			

  		}	
      	
      }

      return true;

     

}

async function testall(){

	

	const accounts = await provider.listAccounts();

	console.log('test accounts');
	console.log(accounts);

	console.log('1st account is contract deployer');
	console.log('2-4 accounts are test users');


	let admin_wallet = provider.getSigner(0);
	const admin_wallet_addr = accounts[0];


	let user1_wallet = provider.getSigner(1);
	const user1_wallet_addr = accounts[1];

	let user2_wallet = provider.getSigner(2);
	const user2_wallet_addr = accounts[2];

	let user3_wallet = provider.getSigner(3)
	const user3_wallet_addr = accounts[3];

	




	
	
	console.log('/* 1.deploy token contract */');

	try {
	    let contract_factory = new ethers.ContractFactory(token_contract_abi, token_contract_bytecode, admin_wallet);
	  
	    token_contract = await contract_factory.deploy(admin_wallet_addr, 'ZZZ', 'ZZZ', '1000000000000000000000000', 18);
	  	
	  	
	    await token_contract.deployTransaction.wait(); //after that it is deployed;

	    console.log ('token address=',token_contract.address);

	}  catch (e) {

		console.log('== 1.deploy token contract - failed ==');
		process.exit(0);
	}

	 


	console.log('== 1.deploy token contract - passed ==');
  	

	
	console.log('/* 2.users get tokens from deployer */');
	
		  
	
	
	if (!await verifyUserBalance(user1_wallet_addr, token_contract)) await token_contract.connect(admin_wallet).transfer(user1_wallet_addr, '15000000000000000000000');
	if (!await verifyUserBalance(user2_wallet_addr, token_contract)) await token_contract.connect(admin_wallet).transfer(user2_wallet_addr, '15000000000000000000000');
	if (!await verifyUserBalance(user3_wallet_addr, token_contract)) await token_contract.connect(admin_wallet).transfer(user3_wallet_addr, '15000000000000000000000');
		
	console.log('user balaces:');
				

  	await printUserBalance('user1', user1_wallet_addr); 
	await printUserBalance('user2', user2_wallet_addr); 
	await printUserBalance('user3', user3_wallet_addr); 


	if ( await verifyUserBalance(user1_wallet_addr, token_contract) && 
	 	 await verifyUserBalance(user2_wallet_addr, token_contract)  &&
		 await verifyUserBalance(user3_wallet_addr, token_contract) 
		  ) {
		console.log('=== 2 - user balances- passed ===');
	} else {
		console.log('=== 2 - user balances- failed ===');
		process.exit(0);
	}
		 
	
	console.log('/* 3.deploy staking contract */');

	try {
	    let contract_factory = new ethers.ContractFactory(staking_contract_abi, staking_contract_bytecode, admin_wallet);

	    staking_contract = await contract_factory.deploy();

	    await staking_contract.deployTransaction.wait(); //after that it is deployed;

	}  catch (e) {

		console.log('== 1.deploy staking contract - failed ==');
		process.exit(0);
	}

	 

	console.log('== 3.deploy staking contract - passed ==');


	console.log('/* 4.configure staking contract */');

	try {
		await staking_contract.connect(admin_wallet).setContractDay(300); //300 seconds (5 min)
		await staking_contract.connect(admin_wallet).setBaseToken(token_contract.address); 
		await staking_contract.connect(admin_wallet).addDepositProfile(10000, 300, true, 0); 
		await staking_contract.connect(admin_wallet).addDepositProfile(15000, 450, true, 0); 
		await staking_contract.connect(admin_wallet).addDepositProfile(20000, 600, true, 0); 

		await staking_contract.connect(admin_wallet).startContract(); 


	} catch (e) {
		console.log('== 4.configure staking contract - failed ==');
		process.exit(0);	
	}
  	console.log('== 4.configure staking contract - passed ==');

 	console.log('/* 5.approve tokens move */');

  	const user1_stake_token_rw = new ethers.Contract(staking_contract.address, staking_contract_abi, user1_wallet);
	const user2_stake_token_rw = new ethers.Contract(staking_contract.address, staking_contract_abi, user2_wallet);
	const user3_stake_token_rw = new ethers.Contract(staking_contract.address, staking_contract_abi, user3_wallet);

	const admin_staking_rw = new ethers.Contract(staking_contract.address, staking_contract_abi, admin_wallet);
    
	await approveTokens(user1_wallet_addr, user1_wallet, token_contract, staking_contract.address);
	await approveTokens(user2_wallet_addr, user2_wallet, token_contract, staking_contract.address);
	await approveTokens(user3_wallet_addr, user3_wallet, token_contract, staking_contract.address);


	if ( 	await verifyApproval(token_contract, user1_wallet_addr, staking_contract.address) &&
			await verifyApproval(token_contract, user2_wallet_addr, staking_contract.address) &&
			await verifyApproval(token_contract, user3_wallet_addr, staking_contract.address) 
		 ){

		console.log('=== 5 - token approval- passed ===');
	} else {
		console.log('=== 5 - token approval- failed ===');
		process.exit(0);
	}



  	console.log('/* 6.stake tokens */');

  	await stakeTokens('5000000000000000000000',1,user1_stake_token_rw);
  	await stakeTokens('2000000000000000000000',2,user1_stake_token_rw);
  	await stakeTokens('3000000000000000000000',3,user1_stake_token_rw);

  	await stakeTokens('5000000000000000000000',1,user2_stake_token_rw);
  	await stakeTokens('2000000000000000000000',2,user2_stake_token_rw);
  	await stakeTokens('3000000000000000000000',3,user2_stake_token_rw);

  	await stakeTokens('5000000000000000000000',1,user3_stake_token_rw);
  	await stakeTokens('2000000000000000000000',2,user3_stake_token_rw);
  	await stakeTokens('3000000000000000000000',3,user3_stake_token_rw);
 
 	
 	console.log('wait 3 seconds');	
 	sleep(300);

 	if (	await verifyDeposit(user1_wallet_addr, user1_stake_token_rw,5000, 0) && 
 			await verifyDeposit(user1_wallet_addr, user1_stake_token_rw,2000, 1) &&
 			await verifyDeposit(user1_wallet_addr, user1_stake_token_rw,3000, 2)){
 		console.log('=== 6 - user1 stake tokens- passed ===');
 	} else {
 		console.log('=== 6 - user1 stake tokens- failed ===');
 		process.exit(0);
 	}


 	if (	await verifyDeposit(user2_wallet_addr, user2_stake_token_rw,5000, 0) && 
 			await verifyDeposit(user2_wallet_addr, user2_stake_token_rw,2000, 1) &&
 			await verifyDeposit(user2_wallet_addr, user2_stake_token_rw,3000, 2)){
 		console.log('=== 6 - user2 stake tokens- passed ===');
 	} else {
 		console.log('=== 6 - user2 stake tokens- failed ===');
 		process.exit(0);
 	}


 	if (	await verifyDeposit(user3_wallet_addr, user3_stake_token_rw,5000, 0) && 
 			await verifyDeposit(user3_wallet_addr, user3_stake_token_rw,2000, 1) &&
 			await verifyDeposit(user3_wallet_addr, user3_stake_token_rw,3000, 2)){
 		console.log('=== 6 - user3 stake tokens- passed ===');
 	} else {
 		console.log('=== 6 - user1 stake tokens- failed ===');
 		process.exit(0);
 	}

 	
 	
 	
  
  	console.log('/* 7.verify withdraw deposits */');

  	if ( await verifyWithdrawDeposits(user1_wallet_addr, user1_stake_token_rw) ) {
  		console.log('=== 7- user1 verify withdraw deposits - passed ===');	
  	} else {
 		console.log('=== 7- user1 verify withdraw deposits - failed ===');	
 		process.exit(0);
 	}
 	

 	
  	if ( await verifyWithdrawDeposits(user2_wallet_addr, user2_stake_token_rw) ) {
  		console.log('=== 7- user2 verify withdraw deposits - passed ===');	
  	} else {
 		console.log('=== 7- user2 verify withdraw deposits - failed ===');	
 		process.exit(0);
 	}
 	
 	
 	
  	if ( await verifyWithdrawDeposits(user3_wallet_addr, user3_stake_token_rw) ) {
  		console.log('=== 7- user3 verify withdraw deposits - passed ===');	
  	} else {
 		console.log('=== 7- user3 verify withdraw deposits - failed ===');	
 		process.exit(0);
 	}
 	
 
 	console.log('=== all tests passed ===');	
}


